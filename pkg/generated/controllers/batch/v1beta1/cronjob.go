/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1beta1

import (
	"context"
	"time"

	"github.com/rancher/wrangler/pkg/apply"
	"github.com/rancher/wrangler/pkg/condition"
	"github.com/rancher/wrangler/pkg/generic"
	v1beta1 "k8s.io/api/batch/v1beta1"
	"k8s.io/apimachinery/pkg/api/equality"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	utilruntime "k8s.io/apimachinery/pkg/util/runtime"
	"k8s.io/apimachinery/pkg/watch"
	informers "k8s.io/client-go/informers/batch/v1beta1"
	clientset "k8s.io/client-go/kubernetes/typed/batch/v1beta1"
	listers "k8s.io/client-go/listers/batch/v1beta1"
	"k8s.io/client-go/tools/cache"
)

type CronJobHandler func(string, *v1beta1.CronJob) (*v1beta1.CronJob, error)

type CronJobController interface {
	generic.ControllerMeta
	CronJobClient

	OnChange(ctx context.Context, name string, sync CronJobHandler)
	OnRemove(ctx context.Context, name string, sync CronJobHandler)
	Enqueue(namespace, name string)
	EnqueueAfter(namespace, name string, duration time.Duration)

	Cache() CronJobCache
}

type CronJobClient interface {
	Create(*v1beta1.CronJob) (*v1beta1.CronJob, error)
	Update(*v1beta1.CronJob) (*v1beta1.CronJob, error)
	UpdateStatus(*v1beta1.CronJob) (*v1beta1.CronJob, error)
	Delete(namespace, name string, options *metav1.DeleteOptions) error
	Get(namespace, name string, options metav1.GetOptions) (*v1beta1.CronJob, error)
	List(namespace string, opts metav1.ListOptions) (*v1beta1.CronJobList, error)
	Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error)
	Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1beta1.CronJob, err error)
}

type CronJobCache interface {
	Get(namespace, name string) (*v1beta1.CronJob, error)
	List(namespace string, selector labels.Selector) ([]*v1beta1.CronJob, error)

	AddIndexer(indexName string, indexer CronJobIndexer)
	GetByIndex(indexName, key string) ([]*v1beta1.CronJob, error)
}

type CronJobIndexer func(obj *v1beta1.CronJob) ([]string, error)

type cronJobController struct {
	controllerManager *generic.ControllerManager
	clientGetter      clientset.CronJobsGetter
	informer          informers.CronJobInformer
	gvk               schema.GroupVersionKind
}

func NewCronJobController(gvk schema.GroupVersionKind, controllerManager *generic.ControllerManager, clientGetter clientset.CronJobsGetter, informer informers.CronJobInformer) CronJobController {
	return &cronJobController{
		controllerManager: controllerManager,
		clientGetter:      clientGetter,
		informer:          informer,
		gvk:               gvk,
	}
}

func FromCronJobHandlerToHandler(sync CronJobHandler) generic.Handler {
	return func(key string, obj runtime.Object) (ret runtime.Object, err error) {
		var v *v1beta1.CronJob
		if obj == nil {
			v, err = sync(key, nil)
		} else {
			v, err = sync(key, obj.(*v1beta1.CronJob))
		}
		if v == nil {
			return nil, err
		}
		return v, err
	}
}

func (c *cronJobController) Updater() generic.Updater {
	return func(obj runtime.Object) (runtime.Object, error) {
		newObj, err := c.Update(obj.(*v1beta1.CronJob))
		if newObj == nil {
			return nil, err
		}
		return newObj, err
	}
}

func UpdateCronJobDeepCopyOnChange(client CronJobClient, obj *v1beta1.CronJob, handler func(obj *v1beta1.CronJob) (*v1beta1.CronJob, error)) (*v1beta1.CronJob, error) {
	if obj == nil {
		return obj, nil
	}

	copyObj := obj.DeepCopy()
	newObj, err := handler(copyObj)
	if newObj != nil {
		copyObj = newObj
	}
	if obj.ResourceVersion == copyObj.ResourceVersion && !equality.Semantic.DeepEqual(obj, copyObj) {
		return client.Update(copyObj)
	}

	return copyObj, err
}

func (c *cronJobController) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, handler)
}

func (c *cronJobController) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), handler)
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, removeHandler)
}

func (c *cronJobController) OnChange(ctx context.Context, name string, sync CronJobHandler) {
	c.AddGenericHandler(ctx, name, FromCronJobHandlerToHandler(sync))
}

func (c *cronJobController) OnRemove(ctx context.Context, name string, sync CronJobHandler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), FromCronJobHandlerToHandler(sync))
	c.AddGenericHandler(ctx, name, removeHandler)
}

func (c *cronJobController) Enqueue(namespace, name string) {
	c.controllerManager.Enqueue(c.gvk, c.informer.Informer(), namespace, name)
}

func (c *cronJobController) EnqueueAfter(namespace, name string, duration time.Duration) {
	c.controllerManager.EnqueueAfter(c.gvk, c.informer.Informer(), namespace, name, duration)
}

func (c *cronJobController) Informer() cache.SharedIndexInformer {
	return c.informer.Informer()
}

func (c *cronJobController) GroupVersionKind() schema.GroupVersionKind {
	return c.gvk
}

func (c *cronJobController) Cache() CronJobCache {
	return &cronJobCache{
		lister:  c.informer.Lister(),
		indexer: c.informer.Informer().GetIndexer(),
	}
}

func (c *cronJobController) Create(obj *v1beta1.CronJob) (*v1beta1.CronJob, error) {
	return c.clientGetter.CronJobs(obj.Namespace).Create(obj)
}

func (c *cronJobController) Update(obj *v1beta1.CronJob) (*v1beta1.CronJob, error) {
	return c.clientGetter.CronJobs(obj.Namespace).Update(obj)
}

func (c *cronJobController) UpdateStatus(obj *v1beta1.CronJob) (*v1beta1.CronJob, error) {
	return c.clientGetter.CronJobs(obj.Namespace).UpdateStatus(obj)
}

func (c *cronJobController) Delete(namespace, name string, options *metav1.DeleteOptions) error {
	return c.clientGetter.CronJobs(namespace).Delete(name, options)
}

func (c *cronJobController) Get(namespace, name string, options metav1.GetOptions) (*v1beta1.CronJob, error) {
	return c.clientGetter.CronJobs(namespace).Get(name, options)
}

func (c *cronJobController) List(namespace string, opts metav1.ListOptions) (*v1beta1.CronJobList, error) {
	return c.clientGetter.CronJobs(namespace).List(opts)
}

func (c *cronJobController) Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error) {
	return c.clientGetter.CronJobs(namespace).Watch(opts)
}

func (c *cronJobController) Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1beta1.CronJob, err error) {
	return c.clientGetter.CronJobs(namespace).Patch(name, pt, data, subresources...)
}

type cronJobCache struct {
	lister  listers.CronJobLister
	indexer cache.Indexer
}

func (c *cronJobCache) Get(namespace, name string) (*v1beta1.CronJob, error) {
	return c.lister.CronJobs(namespace).Get(name)
}

func (c *cronJobCache) List(namespace string, selector labels.Selector) ([]*v1beta1.CronJob, error) {
	return c.lister.CronJobs(namespace).List(selector)
}

func (c *cronJobCache) AddIndexer(indexName string, indexer CronJobIndexer) {
	utilruntime.Must(c.indexer.AddIndexers(map[string]cache.IndexFunc{
		indexName: func(obj interface{}) (strings []string, e error) {
			return indexer(obj.(*v1beta1.CronJob))
		},
	}))
}

func (c *cronJobCache) GetByIndex(indexName, key string) (result []*v1beta1.CronJob, err error) {
	objs, err := c.indexer.ByIndex(indexName, key)
	if err != nil {
		return nil, err
	}
	for _, obj := range objs {
		result = append(result, obj.(*v1beta1.CronJob))
	}
	return result, nil
}

type CronJobStatusHandler func(obj *v1beta1.CronJob, status v1beta1.CronJobStatus) (v1beta1.CronJobStatus, error)

type CronJobGeneratingHandler func(obj *v1beta1.CronJob, status v1beta1.CronJobStatus) ([]runtime.Object, v1beta1.CronJobStatus, error)

func RegisterCronJobStatusHandler(ctx context.Context, controller CronJobController, condition condition.Cond, name string, handler CronJobStatusHandler) {
	statusHandler := &cronJobStatusHandler{
		client:    controller,
		condition: condition,
		handler:   handler,
	}
	controller.AddGenericHandler(ctx, name, FromCronJobHandlerToHandler(statusHandler.sync))
}

func RegisterCronJobGeneratingHandler(ctx context.Context, controller CronJobController, apply apply.Apply,
	condition condition.Cond, name string, handler CronJobGeneratingHandler, opts *generic.GeneratingHandlerOptions) {
	statusHandler := &cronJobGeneratingHandler{
		CronJobGeneratingHandler: handler,
		apply:                    apply,
		name:                     name,
		gvk:                      controller.GroupVersionKind(),
	}
	if opts != nil {
		statusHandler.opts = *opts
	}
	RegisterCronJobStatusHandler(ctx, controller, condition, name, statusHandler.Handle)
}

type cronJobStatusHandler struct {
	client    CronJobClient
	condition condition.Cond
	handler   CronJobStatusHandler
}

func (a *cronJobStatusHandler) sync(key string, obj *v1beta1.CronJob) (*v1beta1.CronJob, error) {
	if obj == nil {
		return obj, nil
	}

	origStatus := obj.Status
	obj = obj.DeepCopy()
	newStatus, err := a.handler(obj, obj.Status)
	if err != nil {
		// Revert to old status on error
		newStatus = *origStatus.DeepCopy()
	}

	obj.Status = newStatus
	if a.condition != "" {
		if errors.IsConflict(err) {
			a.condition.SetError(obj, "", nil)
		} else {
			a.condition.SetError(obj, "", err)
		}
	}
	if !equality.Semantic.DeepEqual(origStatus, obj.Status) {
		var newErr error
		obj, newErr = a.client.UpdateStatus(obj)
		if err == nil {
			err = newErr
		}
	}
	return obj, err
}

type cronJobGeneratingHandler struct {
	CronJobGeneratingHandler
	apply apply.Apply
	opts  generic.GeneratingHandlerOptions
	gvk   schema.GroupVersionKind
	name  string
}

func (a *cronJobGeneratingHandler) Handle(obj *v1beta1.CronJob, status v1beta1.CronJobStatus) (v1beta1.CronJobStatus, error) {
	objs, newStatus, err := a.CronJobGeneratingHandler(obj, status)
	if err != nil {
		return newStatus, err
	}

	apply := a.apply

	if !a.opts.DynamicLookup {
		apply = apply.WithStrictCaching()
	}

	if !a.opts.AllowCrossNamespace && !a.opts.AllowClusterScoped {
		apply = apply.WithSetOwnerReference(true, false).
			WithDefaultNamespace(obj.GetNamespace()).
			WithListerNamespace(obj.GetNamespace())
	}

	if !a.opts.AllowClusterScoped {
		apply = apply.WithRestrictClusterScoped()
	}

	return newStatus, apply.
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects(objs...)
}
